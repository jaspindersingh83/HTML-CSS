<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
    "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg onload="init(evt)"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink">
    <script type="text/ecmascript" xlink:href="red_black_tree.js.gz"/>
    <script type="text/ecmascript" xlink:href="dom_graph.js.gz"/>
    <script type="text/ecmascript"><![CDATA[
        var svgns = "http://www.w3.org/2000/svg";
        var value;
        var graph;
        var tree;
        var current;
        
        function init(e) {
            if ( window.svgDocument == null )
                svgDocument = e.target.ownerDocument;
            
            graph = svgDocument.getElementById("graph");
            value = svgDocument.getElementById("value");

            buildRedBlackTree();
            displayTree();
        }

        function buildRedBlackTree() {
            // create Red Black Tree
            tree = new RedBlackTree();

            // add some nodes
            // NOTE: that I added a compare method to Numbers (see end of script)
            for ( var i = 0; i < 32; i++ ) {
                var num = 1;

                while ( tree.find(num) != null ) {
                    num = Math.floor( Math.random() * 1000 );
                }
                tree.add(num);
            }

            // remove nodes, one that exists, one that doesn't
            tree.remove(1001);  // does nothing
            tree.remove(1);     // remove one node
        }

        function displayTree() {
            if ( tree._root != null ) {
                var gRoot =  new Node(tree._root.toString());
                var stack = [[tree._root, gRoot]];
                var newNode;
                
                while ( stack.length > 0 ) {
                    var current = stack.pop();
                    var rbNode = current[0];
                    var gNode = current[1];

                    // save reference to GraphNode - used later
                    rbNode.graphNode = gNode;

                    // add invisible nodes only if this is not a leaf
                    if ( rbNode._left != null || rbNode._right != null ) {
                        if ( rbNode._left != null ) {
                            newNode = new Node(rbNode._left.toString());
                            gNode.appendChild(newNode);
                            stack.push([rbNode._left, newNode]);
                        } else {
                            newNode = new Node("");
                            newNode.visible = false;
                            gNode.appendChild(newNode);
                        }
                        if ( rbNode._right != null ) {
                            newNode = new Node(rbNode._right.toString());
                            gNode.appendChild(newNode);
                            stack.push([rbNode._right, newNode]);
                        } else {
                            newNode = new Node("");
                            newNode.visible = false;
                            gNode.appendChild(newNode);
                        }
                    }
                }

                gRoot.layout();
                gRoot.plantTree(0,0);
                gRoot.realize(graph);
                var bbox = graph.getBBox();
                var x_offset = -bbox.x + (innerWidth - bbox.width) / 2;
                var y_offset = -bbox.y + (innerHeight - bbox.height) / 2;
                graph.setAttributeNS(
                    null,
                    "transform",
                    "translate(" + x_offset + "," + y_offset + ")"
                );
            }
        }

        /*****
        *
        *   exercise next and previous functions
        *
        *   NOTE: I'm calling private methods to have access to the Red-Black
        *   tree nodes.  These nodes are normally hidden from the developer,
        *   but I had to access them to highlight the currently active node in
        *   the graph.  Typically, one will call tree.next() and
        *   tree.previous() to get the actual node values, which are what the
        *   developer adds to the tree.  They never work with nodes directly
        *
        *****/
        function next() {
            if ( current != null ) {
                value.firstChild.data = "n/a";
                current.graphNode.rect.setAttributeNS(null, "fill", "gray");
            }
            current = tree._nextNode(current);
            if ( current != null ) {
                value.firstChild.data = current.toString();
                current.graphNode.rect.setAttributeNS(null, "fill", "green");
            }
        }

        function previous() {
            if ( current != null ) {
                value.firstChild.data = "n/a";
                current.graphNode.rect.setAttributeNS(null, "fill", "gray");
            }
            current = tree._previousNode(current);
            if ( current != null ) {
                value.firstChild.data = current.toString();
                current.graphNode.rect.setAttributeNS(null, "fill", "green");
            }
        }
        
        /*****
        *
        *   button highlight and unhighlight code
        *
        *****/
        function highlight(e) {
            e.target.setAttributeNS(null,'stroke','orange')
        }

        function unhighlight(e) {
            e.target.setAttributeNS(null, 'stroke', 'black')
        }

        /*****
        *
        *   add compare method to all numbers
        *
        *****/
        Number.prototype.compare = function(that) {
            return this - that;
        }
    ]]></script>
    <g onclick="previous()">
        <rect x="5" y="5" width="60" height="16" rx="5" stroke="black" fill="silver"
              onmouseover="highlight(evt)" onmouseout="unhighlight(evt)"/>
        <text x="35" y="17" text-anchor="middle" pointer-events="none">Prev</text>
    </g>
    <g onclick="next()" transform="translate(65, 0)">
        <rect x="5" y="5" width="60" height="16" rx="5" stroke="black" fill="silver"
              onmouseover="highlight(evt)" onmouseout="unhighlight(evt)"/>
        <text x="35" y="17" text-anchor="middle" pointer-events="none">Next</text>
    </g>
    <text x="60" y="40" text-anchor="middle"><tspan>Current Value: </tspan><tspan id="value">n/a</tspan></text>
    <g id="graph"/>
</svg>
